package db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "MOVIE_DETAIL".
*/
public class MovieDetailDao extends AbstractDao<MovieDetail, Long> {

    public static final String TABLENAME = "MOVIE_DETAIL";

    /**
     * Properties of entity MovieDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PosterPath = new Property(1, String.class, "posterPath", false, "POSTER_PATH");
        public final static Property Overview = new Property(2, String.class, "overview", false, "OVERVIEW");
        public final static Property ReleaseDate = new Property(3, String.class, "releaseDate", false, "RELEASE_DATE");
        public final static Property OriginalTitle = new Property(4, String.class, "originalTitle", false, "ORIGINAL_TITLE");
        public final static Property OriginalLanguage = new Property(5, String.class, "originalLanguage", false, "ORIGINAL_LANGUAGE");
        public final static Property BackdropPath = new Property(6, String.class, "backdropPath", false, "BACKDROP_PATH");
        public final static Property Adult = new Property(7, Boolean.class, "adult", false, "ADULT");
        public final static Property Video = new Property(8, Boolean.class, "video", false, "VIDEO");
        public final static Property Popularity = new Property(9, Double.class, "popularity", false, "POPULARITY");
        public final static Property VoteAverage = new Property(10, Double.class, "voteAverage", false, "VOTE_AVERAGE");
        public final static Property VoteCount = new Property(11, Integer.class, "voteCount", false, "VOTE_COUNT");
    }


    public MovieDetailDao(DaoConfig config) {
        super(config);
    }
    
    public MovieDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MOVIE_DETAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"POSTER_PATH\" TEXT NOT NULL ," + // 1: posterPath
                "\"OVERVIEW\" TEXT," + // 2: overview
                "\"RELEASE_DATE\" TEXT," + // 3: releaseDate
                "\"ORIGINAL_TITLE\" TEXT," + // 4: originalTitle
                "\"ORIGINAL_LANGUAGE\" TEXT," + // 5: originalLanguage
                "\"BACKDROP_PATH\" TEXT," + // 6: backdropPath
                "\"ADULT\" INTEGER," + // 7: adult
                "\"VIDEO\" INTEGER," + // 8: video
                "\"POPULARITY\" REAL," + // 9: popularity
                "\"VOTE_AVERAGE\" REAL," + // 10: voteAverage
                "\"VOTE_COUNT\" INTEGER);"); // 11: voteCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MOVIE_DETAIL\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MovieDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPosterPath());
 
        String overview = entity.getOverview();
        if (overview != null) {
            stmt.bindString(3, overview);
        }
 
        String releaseDate = entity.getReleaseDate();
        if (releaseDate != null) {
            stmt.bindString(4, releaseDate);
        }
 
        String originalTitle = entity.getOriginalTitle();
        if (originalTitle != null) {
            stmt.bindString(5, originalTitle);
        }
 
        String originalLanguage = entity.getOriginalLanguage();
        if (originalLanguage != null) {
            stmt.bindString(6, originalLanguage);
        }
 
        String backdropPath = entity.getBackdropPath();
        if (backdropPath != null) {
            stmt.bindString(7, backdropPath);
        }
 
        Boolean adult = entity.getAdult();
        if (adult != null) {
            stmt.bindLong(8, adult ? 1L: 0L);
        }
 
        Boolean video = entity.getVideo();
        if (video != null) {
            stmt.bindLong(9, video ? 1L: 0L);
        }
 
        Double popularity = entity.getPopularity();
        if (popularity != null) {
            stmt.bindDouble(10, popularity);
        }
 
        Double voteAverage = entity.getVoteAverage();
        if (voteAverage != null) {
            stmt.bindDouble(11, voteAverage);
        }
 
        Integer voteCount = entity.getVoteCount();
        if (voteCount != null) {
            stmt.bindLong(12, voteCount);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MovieDetail readEntity(Cursor cursor, int offset) {
        return new MovieDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // posterPath
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // overview
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // releaseDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // originalTitle
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // originalLanguage
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // backdropPath
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // adult
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // video
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // popularity
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // voteAverage
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11) // voteCount
        );
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MovieDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPosterPath(cursor.getString(offset + 1));
        entity.setOverview(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setReleaseDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOriginalTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOriginalLanguage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBackdropPath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAdult(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setVideo(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setPopularity(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setVoteAverage(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setVoteCount(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MovieDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MovieDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
